flask db init
flask db migrate -m "users table"
flask run --port 5001
flask db upgrade
flask db migrate -m "posts table"
app.app_context().push()
u = User(username='john', email='john@example.com')
db.session.add(u)
db.session.commit()
db.session.rollback()
query = sa.select(User)
users = db.session.scalars(query).all()
users
users = db.session.scalars(query)
for u in users:
    print(u.id, u.username)
u = db.session.get(User, 1)
p = Post(body='my first post!', author=u)
db.session.add(p)
db.session.commit()
query = sa.select(User).order_by(User.username.desc())
db.session.scalars(query).all()
query = sa.select(User).where(User.username.like('s%'))
db.session.scalars(query).all()
db.session.scalar()
flask db downgrade base
flask db downgrade head
from app import app, db
from app.models import User, Post
import sqlalchemy as sa
app.app_context().push()
flask shell
query = sa.select(Post).order_by(Post.timestamp.desc())
posts = db.paginate(query, page=1, per_page=20, error_out=False).items

Start Test SMTP Server Locally
aiosmtpd -n -c aiosmtpd.handlers.Debugging -l localhost:8025 # SMTP test server

Find Text That Needs to be Translated
pybabel extract -F babel.cfg -k _l -o messages.pot . 

Translate Test to Spanish
pybabel init -i messages.pot -d app/translations -l es

Make Translations Available to App 
pybabel compile -d app/translations

Update Translations
pybabel update -i messages.pot -d app/translations

flask translate init <language-code>
flask translate update
flask translate compile

https://www.elastic.co/guide/en/elasticsearch/reference/8.17/docker.html
docker network create elastic
docker pull docker.elastic.co/elasticsearch/elasticsearch-wolfi:8.17.3
docker run --name elasticsearch -d --rm -p 9200:9200 --memory="2GB" -e discovery.type=single-node -e xpack.security.enabled=false -t docker.elastic.co/elasticsearch/elasticsearch:8.17.3


app.elasticsearch.indices.delete(index='posts')

es.search(index='my_index', query={'match': {'text': 'second'}})
ObjectApiResponse({
    'took': 2,
    'timed_out': False,
    '_shards': {'total': 1, 'successful': 1, 'skipped': 0, 'failed': 0},
    'hits': {
        'total': {'value': 1, 'relation': 'eq'},
        'max_score': 0.7361701,
        'hits': [
            {
                '_index': 'my_index',
                '_id': '2',
                '_score': 0.7361701,
                '_source': {'text': 'a second test'}
            }
        ]
    }
})
es = Elasticsearch('http://localhost:9200')
es.index(index='my_index', id=1, document={'text': 'this is a test'})
es.index(index='my_index', id=2, document={'text': 'a second test'})
es.search(index='my_index', query={'match': {'text': 'this test'}})